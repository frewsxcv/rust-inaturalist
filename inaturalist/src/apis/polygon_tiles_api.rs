/*
 * iNaturalist API
 *
 * # https://api.inaturalist.org/v1/  [iNaturalist](https://www.inaturalist.org/) is a global community of naturalists, scientists, and members of the public sharing over a million wildlife sightings to teach one another about the natural world while creating high quality citizen science data for science and conservation.  These API methods return data in JSON/JSONP and PNG response formats. They are meant to supplement the existing [iNaturalist API](https://www.inaturalist.org/pages/api+reference), implemented in Ruby on Rails, which has more functionality and supports more write operations, but tends to be slower and have less consistent response formats. Visit our [developers page](https://www.inaturalist.org/pages/developers) for more information. Write operations that expect and return JSON describe a single `body` parameter that represents the request body, which should be specified as JSON. See the \"Model\" of each body parameter for attributes that we accept in these JSON objects.  Multiple values for a single URL parameter should be separated by commas, e.g. `taxon_id=1,2,3`.  Map tiles are generated using the [node-mapnik](https://github.com/mapnik/node-mapnik) library, following the XYZ map tiling scheme. The \"Observation Tile\" methods accept nearly all the parameters of the observation search APIs, and will generate map tiles reflecting the same observations returned by searches. These \"Observation Tile\" methods have corresponding [UTFGrid](https://github.com/mapbox/utfgrid-spec) JSON responses which return information needed to make interactive maps.  Authentication in the Node API is handled via JSON Web Tokens (JWT). To obtain one, make an [OAuth-authenticated request](http://www.inaturalist.org/pages/api+reference#auth) to https://www.inaturalist.org/users/api_token. Each JWT will expire after 24 hours. Authentication required for all PUT and POST requests. Some GET requests will also include private information like hidden coordinates if the authenticated user has permission to view them.  Photos served from https://static.inaturalist.org and https://inaturalist-open-data.s3.amazonaws.com have multiple size variants and not all size variants are returned in responses. To access other sizes, the photo URL can be modified to replace only the size qualifier (each variant shares the exact same extension). The domain a photo is hosted under reflects the license under which the photo is being shared, and the domain may change over time if the license changes. Photos in the `inaturalist-open-data` domain are shared under open licenses. These can be accessed in bulk in the [iNaturalist AWS Open Dataset]( https://registry.opendata.aws/inaturalist-open-data/). Photos in the `static.inaturalist.org` domain do not have open licenses.  The available photo sizes are: * original (max 2048px in either dimension) * large (max 1024px in either dimension) * medium (max 500px in either dimension) * small (max 240px in either dimension) * thumb (max 100px in either dimension) * square (75px square)  iNaturalist Website: https://www.inaturalist.org/  Open Source Software: https://github.com/inaturalist/  ## Terms of Use  Use of this API is subject to the iNaturalist [Terms of Service](https://www.inaturalist.org/terms) and [Privacy Policy](https://www.inaturalist.org/privacy). We will block any use of our API that violates our Terms or Privacy Policy without notice. The API is intended to support application development, not data scraping. For pre- generated data exports, see https://www.inaturalist.org/pages/developers.  Please note that we throttle API usage to a max of 100 requests per minute, though we ask that you try to keep it to 60 requests per minute or lower, and to keep under 10,000 requests per day. If we notice usage that has serious impact on our performance we may institute blocks without notification.  Terms of Service: https://www.inaturalist.org/terms  Privacy Policy: https://www.inaturalist.org/privacy
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`places_place_id_zoom_xy_png_get`]
#[derive(Clone, Debug)]
pub struct PlacesPlaceIdZoomXyPngGetParams {
    /// Place ID
    pub place_id: i32,
    /// Zoom level. Z coordinate in the XYZ tiling scheme
    pub zoom: i32,
    /// X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
    pub x: i32,
    /// Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
    pub y: i32,
    /// Set the `Cache-Control` HTTP header with this value as `max-age`, in seconds. This means subsequent identical requests will be cached on iNaturalist servers, and commonly within web browsers
    pub ttl: Option<String>,
}

/// struct for passing parameters to the method [`taxon_places_taxon_id_zoom_xy_png_get`]
#[derive(Clone, Debug)]
pub struct TaxonPlacesTaxonIdZoomXyPngGetParams {
    /// Taxon ID
    pub taxon_id: i32,
    /// Zoom level. Z coordinate in the XYZ tiling scheme
    pub zoom: i32,
    /// X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
    pub x: i32,
    /// Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
    pub y: i32,
    /// Set the `Cache-Control` HTTP header with this value as `max-age`, in seconds. This means subsequent identical requests will be cached on iNaturalist servers, and commonly within web browsers
    pub ttl: Option<String>,
}

/// struct for passing parameters to the method [`taxon_ranges_taxon_id_zoom_xy_png_get`]
#[derive(Clone, Debug)]
pub struct TaxonRangesTaxonIdZoomXyPngGetParams {
    /// Taxon ID
    pub taxon_id: i32,
    /// Zoom level. Z coordinate in the XYZ tiling scheme
    pub zoom: i32,
    /// X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
    pub x: i32,
    /// Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
    pub y: i32,
    /// Primary color to use in tile creation. Accepts common colors by string (e.g. `color=blue`), and accepts escaped color HEX codes (e.g. `color=%2386a91c`)
    pub color: Option<String>,
    /// Set the `Cache-Control` HTTP header with this value as `max-age`, in seconds. This means subsequent identical requests will be cached on iNaturalist servers, and commonly within web browsers
    pub ttl: Option<String>,
}

/// struct for typed errors of method [`places_place_id_zoom_xy_png_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlacesPlaceIdZoomXyPngGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`taxon_places_taxon_id_zoom_xy_png_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TaxonPlacesTaxonIdZoomXyPngGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`taxon_ranges_taxon_id_zoom_xy_png_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TaxonRangesTaxonIdZoomXyPngGetError {
    UnknownValue(serde_json::Value),
}

/// Returns a PNG map tile representing the boundary of this place, following the XYZ tiling scheme
pub async fn places_place_id_zoom_xy_png_get(
    configuration: &configuration::Configuration,
    params: PlacesPlaceIdZoomXyPngGetParams,
) -> Result<(), Error<PlacesPlaceIdZoomXyPngGetError>> {
    let uri_str = format!(
        "{}/places/{place_id}/{zoom}/{x}/{y}.png",
        configuration.base_path,
        place_id = params.place_id,
        zoom = params.zoom,
        x = params.x,
        y = params.y
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.ttl {
        req_builder = req_builder.query(&[("ttl", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PlacesPlaceIdZoomXyPngGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns a PNG map tile representing the boundaries of places this taxon is known to occur, following the XYZ tiling scheme
pub async fn taxon_places_taxon_id_zoom_xy_png_get(
    configuration: &configuration::Configuration,
    params: TaxonPlacesTaxonIdZoomXyPngGetParams,
) -> Result<(), Error<TaxonPlacesTaxonIdZoomXyPngGetError>> {
    let uri_str = format!(
        "{}/taxon_places/{taxon_id}/{zoom}/{x}/{y}.png",
        configuration.base_path,
        taxon_id = params.taxon_id,
        zoom = params.zoom,
        x = params.x,
        y = params.y
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.ttl {
        req_builder = req_builder.query(&[("ttl", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<TaxonPlacesTaxonIdZoomXyPngGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns a PNG map tile representing the range of this taxon, following the XYZ tiling scheme
pub async fn taxon_ranges_taxon_id_zoom_xy_png_get(
    configuration: &configuration::Configuration,
    params: TaxonRangesTaxonIdZoomXyPngGetParams,
) -> Result<(), Error<TaxonRangesTaxonIdZoomXyPngGetError>> {
    let uri_str = format!(
        "{}/taxon_ranges/{taxon_id}/{zoom}/{x}/{y}.png",
        configuration.base_path,
        taxon_id = params.taxon_id,
        zoom = params.zoom,
        x = params.x,
        y = params.y
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.color {
        req_builder = req_builder.query(&[("color", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.ttl {
        req_builder = req_builder.query(&[("ttl", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<TaxonRangesTaxonIdZoomXyPngGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
