/*
 * iNaturalist API
 *
 * # https://api.inaturalist.org/v1/  [iNaturalist](https://www.inaturalist.org/) is a global community of naturalists, scientists, and members of the public sharing over a million wildlife sightings to teach one another about the natural world while creating high quality citizen science data for science and conservation. The iNaturalist technology infrastructure and open source software is administered by the [California Academy of Sciences](https://www.calacademy.org/) as part of their mission to explore, explain, and sustain life on Earth.  These API methods return data in JSON/JSONP and PNG response formats. They are meant to supplement the existing [iNaturalist API](https://www.inaturalist.org/pages/api+reference), implemented in Ruby on Rails, which has more functionality and supports more write operations, but tends to be slower and have less consistent response formats. Visit our [developers page](https://www.inaturalist.org/pages/developers) for more information. Write operations that expect and return JSON describe a single `body` parameter that represents the request body, which should be specified as JSON. See the \"Model\" of each body parameter for attributes that we accept in these JSON objects.  Multiple values for a single URL parameter should be separated by commas, e.g. `taxon_id=1,2,3`.  Map tiles are generated using the [node-mapnik](https://github.com/mapnik/node-mapnik) library, following the XYZ map tiling scheme. The \"Observation Tile\" methods accept nearly all the parameters of the observation search APIs, and will generate map tiles reflecting the same observations returned by searches. These \"Observation Tile\" methods have corresponding [UTFGrid](https://github.com/mapbox/utfgrid-spec) JSON responses which return information needed to make interactive maps.  Authentication in the Node API is handled via JSON Web Tokens (JWT). To obtain one, make an [OAuth-authenticated request](http://www.inaturalist.org/pages/api+reference#auth) to https://www.inaturalist.org/users/api_token. Each JWT will expire after 24 hours. Authentication required for all PUT and POST requests. Some GET requests will also include private information like hidden coordinates if the authenticated user has permission to view them.  iNaturalist Website: https://www.inaturalist.org/  Open Source Software: https://github.com/inaturalist/  ## Terms of Use  Use of this API is subject to the iNaturalist [Terms of Service](https://www.inaturalist.org/terms) and [Privacy Policy](https://www.inaturalist.org/privacy). We will block any use of our API that violates our Terms or Privacy Policy without notice. The API is intended to support application development, not data scraping. For pre- generated data exports, see https://www.inaturalist.org/pages/developers.  Please note that we throttle API usage to a max of 100 requests per minute, though we ask that you try to keep it to 60 requests per minute or lower, and to keep under 10,000 requests per day. If we notice usage that has serious impact on our performance we may institute blocks without notification.  Terms of Service: https://www.inaturalist.org/terms  Privacy Policy: https://www.inaturalist.org/privacy 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`identifications_categories_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsCategoriesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsIdPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_identifiers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsIdentifiersGetError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_observers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsObserversGetError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_recent_taxa_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsRecentTaxaGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_similar_species_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsSimilarSpeciesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`identifications_species_counts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdentificationsSpeciesCountsGetError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}


/// Given zero to many of following parameters, return counts of the categories of identifications matching the search criteria 
pub async fn identifications_categories_get(configuration: &configuration::Configuration, current_taxon: Option<bool>, own_observation: Option<bool>, is_change: Option<bool>, taxon_active: Option<bool>, observation_taxon_active: Option<bool>, id: Option<Vec<i32>>, rank: Option<Vec<String>>, observation_rank: Option<Vec<String>>, user_id: Option<Vec<i32>>, user_login: Option<Vec<String>>, current: Option<bool>, category: Option<Vec<String>>, place_id: Option<Vec<String>>, quality_grade: Option<Vec<String>>, taxon_id: Option<Vec<String>>, observation_taxon_id: Option<Vec<String>>, iconic_taxon_id: Option<Vec<String>>, observation_iconic_taxon_id: Option<Vec<String>>, lrank: Option<&str>, hrank: Option<&str>, observation_lrank: Option<&str>, observation_hrank: Option<&str>, without_taxon_id: Option<Vec<String>>, without_observation_taxon_id: Option<Vec<String>>, d1: Option<String>, d2: Option<String>, observation_created_d1: Option<String>, observation_created_d2: Option<String>, observed_d1: Option<String>, observed_d2: Option<String>, id_above: Option<&str>, id_below: Option<&str>, page: Option<&str>, per_page: Option<&str>, order: Option<&str>, order_by: Option<&str>, only_id: Option<bool>) -> Result<(), Error<IdentificationsCategoriesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/categories", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_taxon {
        local_var_req_builder = local_var_req_builder.query(&[("current_taxon", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = own_observation {
        local_var_req_builder = local_var_req_builder.query(&[("own_observation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_change {
        local_var_req_builder = local_var_req_builder.query(&[("is_change", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("observation_taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = current {
        local_var_req_builder = local_var_req_builder.query(&[("current", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("category".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("category", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("quality_grade".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("quality_grade", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_lrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_hrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder = local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_id {
        local_var_req_builder = local_var_req_builder.query(&[("only_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsCategoriesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Given zero to many of following parameters, returns identifications matching the search criteria 
pub async fn identifications_get(configuration: &configuration::Configuration, current_taxon: Option<bool>, own_observation: Option<bool>, is_change: Option<bool>, taxon_active: Option<bool>, observation_taxon_active: Option<bool>, id: Option<Vec<i32>>, rank: Option<Vec<String>>, observation_rank: Option<Vec<String>>, user_id: Option<Vec<i32>>, user_login: Option<Vec<String>>, current: Option<bool>, category: Option<Vec<String>>, place_id: Option<Vec<String>>, quality_grade: Option<Vec<String>>, taxon_id: Option<Vec<String>>, observation_taxon_id: Option<Vec<String>>, iconic_taxon_id: Option<Vec<String>>, observation_iconic_taxon_id: Option<Vec<String>>, lrank: Option<&str>, hrank: Option<&str>, observation_lrank: Option<&str>, observation_hrank: Option<&str>, without_taxon_id: Option<Vec<String>>, without_observation_taxon_id: Option<Vec<String>>, d1: Option<String>, d2: Option<String>, observation_created_d1: Option<String>, observation_created_d2: Option<String>, observed_d1: Option<String>, observed_d2: Option<String>, id_above: Option<&str>, id_below: Option<&str>, page: Option<&str>, per_page: Option<&str>, order: Option<&str>, order_by: Option<&str>, only_id: Option<bool>) -> Result<(), Error<IdentificationsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_taxon {
        local_var_req_builder = local_var_req_builder.query(&[("current_taxon", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = own_observation {
        local_var_req_builder = local_var_req_builder.query(&[("own_observation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_change {
        local_var_req_builder = local_var_req_builder.query(&[("is_change", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("observation_taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = current {
        local_var_req_builder = local_var_req_builder.query(&[("current", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("category".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("category", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("quality_grade".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("quality_grade", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_lrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_hrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder = local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_id {
        local_var_req_builder = local_var_req_builder.query(&[("only_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete an identification. See description of `PUT /identifications/{id} for notes on withdrawing and restoring identifications. 
pub async fn identifications_id_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<IdentificationsIdDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Given an ID, or an array of IDs in comma-delimited format, returns corresponding identifications. A maximum of 30 results will be returned 
pub async fn identifications_id_get(configuration: &configuration::Configuration, id: Vec<i32>) -> Result<(), Error<IdentificationsIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/{id}", local_var_configuration.base_path, id=id.join(",").as_ref());
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update an identification. Note that to \"withdraw\" an observation you send a `PUT` request to this endpoint and set the `current` attribute to false. To \"restore\" it you do the same but set `current` to `true`. Only one identification by a given user can be `current` for a given observation, so if you \"restore\" one all the other identifications by the authenticated user for the given observation will be withdrawn. 
pub async fn identifications_id_put(configuration: &configuration::Configuration, id: i32, body: Option<crate::models::PostIdentification>) -> Result<(), Error<IdentificationsIdPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsIdPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Given zero to many of following parameters, returns creators of identifications matching the search criteria and the count of matching identifications, ordered by count descending 
pub async fn identifications_identifiers_get(configuration: &configuration::Configuration, current_taxon: Option<bool>, own_observation: Option<bool>, is_change: Option<bool>, taxon_active: Option<bool>, observation_taxon_active: Option<bool>, id: Option<Vec<i32>>, rank: Option<Vec<String>>, observation_rank: Option<Vec<String>>, user_id: Option<Vec<i32>>, user_login: Option<Vec<String>>, current: Option<bool>, category: Option<Vec<String>>, place_id: Option<Vec<String>>, quality_grade: Option<Vec<String>>, taxon_id: Option<Vec<String>>, observation_taxon_id: Option<Vec<String>>, iconic_taxon_id: Option<Vec<String>>, observation_iconic_taxon_id: Option<Vec<String>>, lrank: Option<&str>, hrank: Option<&str>, observation_lrank: Option<&str>, observation_hrank: Option<&str>, without_taxon_id: Option<Vec<String>>, without_observation_taxon_id: Option<Vec<String>>, d1: Option<String>, d2: Option<String>, observation_created_d1: Option<String>, observation_created_d2: Option<String>, observed_d1: Option<String>, observed_d2: Option<String>, id_above: Option<&str>, id_below: Option<&str>, page: Option<&str>, per_page: Option<&str>, order: Option<&str>, order_by: Option<&str>, only_id: Option<bool>) -> Result<crate::models::UserCountsResponse, Error<IdentificationsIdentifiersGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/identifiers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_taxon {
        local_var_req_builder = local_var_req_builder.query(&[("current_taxon", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = own_observation {
        local_var_req_builder = local_var_req_builder.query(&[("own_observation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_change {
        local_var_req_builder = local_var_req_builder.query(&[("is_change", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("observation_taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = current {
        local_var_req_builder = local_var_req_builder.query(&[("current", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("category".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("category", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("quality_grade".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("quality_grade", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_lrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_hrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder = local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_id {
        local_var_req_builder = local_var_req_builder.query(&[("only_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IdentificationsIdentifiersGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Given zero to many of following parameters, returns creators of observations of identifications matching the search criteria and the count of matching observations, ordered by count descending 
pub async fn identifications_observers_get(configuration: &configuration::Configuration, current_taxon: Option<bool>, own_observation: Option<bool>, is_change: Option<bool>, taxon_active: Option<bool>, observation_taxon_active: Option<bool>, id: Option<Vec<i32>>, rank: Option<Vec<String>>, observation_rank: Option<Vec<String>>, user_id: Option<Vec<i32>>, user_login: Option<Vec<String>>, current: Option<bool>, category: Option<Vec<String>>, place_id: Option<Vec<String>>, quality_grade: Option<Vec<String>>, taxon_id: Option<Vec<String>>, observation_taxon_id: Option<Vec<String>>, iconic_taxon_id: Option<Vec<String>>, observation_iconic_taxon_id: Option<Vec<String>>, lrank: Option<&str>, hrank: Option<&str>, observation_lrank: Option<&str>, observation_hrank: Option<&str>, without_taxon_id: Option<Vec<String>>, without_observation_taxon_id: Option<Vec<String>>, d1: Option<String>, d2: Option<String>, observation_created_d1: Option<String>, observation_created_d2: Option<String>, observed_d1: Option<String>, observed_d2: Option<String>, id_above: Option<&str>, id_below: Option<&str>, page: Option<&str>, per_page: Option<&str>, order: Option<&str>, order_by: Option<&str>, only_id: Option<bool>) -> Result<crate::models::UserCountsResponse, Error<IdentificationsObserversGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/observers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_taxon {
        local_var_req_builder = local_var_req_builder.query(&[("current_taxon", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = own_observation {
        local_var_req_builder = local_var_req_builder.query(&[("own_observation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_change {
        local_var_req_builder = local_var_req_builder.query(&[("is_change", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("observation_taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = current {
        local_var_req_builder = local_var_req_builder.query(&[("current", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("category".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("category", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("quality_grade".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("quality_grade", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_lrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_hrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder = local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_id {
        local_var_req_builder = local_var_req_builder.query(&[("only_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IdentificationsObserversGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create an identification
pub async fn identifications_post(configuration: &configuration::Configuration, body: Option<crate::models::PostIdentification>) -> Result<(), Error<IdentificationsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns an array of objects each containing an identification and a taxon. Returns IDs representing the earliest occurrence of taxa associated with identifications in the filtered set of results 
pub async fn identifications_recent_taxa_get(configuration: &configuration::Configuration, current_taxon: Option<bool>, own_observation: Option<bool>, is_change: Option<bool>, taxon_active: Option<bool>, observation_taxon_active: Option<bool>, id: Option<Vec<i32>>, rank: Option<Vec<String>>, observation_rank: Option<Vec<String>>, user_id: Option<Vec<i32>>, user_login: Option<Vec<String>>, current: Option<bool>, category: Option<Vec<String>>, place_id: Option<Vec<String>>, quality_grade: Option<Vec<String>>, taxon_id: Option<Vec<String>>, observation_taxon_id: Option<Vec<String>>, iconic_taxon_id: Option<Vec<String>>, observation_iconic_taxon_id: Option<Vec<String>>, lrank: Option<&str>, hrank: Option<&str>, observation_lrank: Option<&str>, observation_hrank: Option<&str>, without_taxon_id: Option<Vec<String>>, without_observation_taxon_id: Option<Vec<String>>, d1: Option<String>, d2: Option<String>, observation_created_d1: Option<String>, observation_created_d2: Option<String>, observed_d1: Option<String>, observed_d2: Option<String>, id_above: Option<&str>, id_below: Option<&str>, page: Option<&str>, per_page: Option<&str>, order: Option<&str>, order_by: Option<&str>, only_id: Option<bool>) -> Result<(), Error<IdentificationsRecentTaxaGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/recent_taxa", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_taxon {
        local_var_req_builder = local_var_req_builder.query(&[("current_taxon", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = own_observation {
        local_var_req_builder = local_var_req_builder.query(&[("own_observation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_change {
        local_var_req_builder = local_var_req_builder.query(&[("is_change", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("observation_taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = current {
        local_var_req_builder = local_var_req_builder.query(&[("current", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("category".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("category", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("quality_grade".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("quality_grade", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_lrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_hrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder = local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_id {
        local_var_req_builder = local_var_req_builder.query(&[("only_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsRecentTaxaGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns species attached to IDs of observations of this taxon, or attached to observations identified as this species, ordered by combined frequency descending. This will only return species in the same iconic taxon, and will never return descendants of the chosen taxon 
pub async fn identifications_similar_species_get(configuration: &configuration::Configuration, taxon_id: i32, acc: Option<bool>, captive: Option<bool>, endemic: Option<bool>, geo: Option<bool>, id_please: Option<bool>, identified: Option<bool>, introduced: Option<bool>, mappable: Option<bool>, native: Option<bool>, out_of_range: Option<bool>, pcid: Option<bool>, photos: Option<bool>, popular: Option<bool>, sounds: Option<bool>, taxon_is_active: Option<bool>, threatened: Option<bool>, verifiable: Option<bool>, licensed: Option<bool>, photo_licensed: Option<bool>, id: Option<Vec<String>>, not_id: Option<Vec<String>>, license: Option<Vec<String>>, ofv_datatype: Option<Vec<String>>, photo_license: Option<Vec<String>>, place_id: Option<Vec<i32>>, project_id: Option<Vec<String>>, rank: Option<Vec<String>>, site_id: Option<Vec<String>>, sound_license: Option<Vec<String>>, without_taxon_id: Option<Vec<String>>, taxon_name: Option<Vec<String>>, user_id: Option<Vec<String>>, user_login: Option<Vec<String>>, ident_user_id: Option<i32>, day: Option<Vec<String>>, month: Option<Vec<String>>, year: Option<Vec<String>>, term_id: Option<Vec<i32>>, term_value_id: Option<Vec<i32>>, without_term_value_id: Option<Vec<i32>>, acc_above: Option<&str>, acc_below: Option<&str>, acc_below_or_unknown: Option<&str>, d1: Option<String>, d2: Option<String>, created_d1: Option<String>, created_d2: Option<String>, created_on: Option<String>, observed_on: Option<String>, unobserved_by_user_id: Option<i32>, apply_project_rules_for: Option<&str>, cs: Option<&str>, csa: Option<&str>, csi: Option<Vec<String>>, geoprivacy: Option<Vec<String>>, taxon_geoprivacy: Option<Vec<String>>, hrank: Option<&str>, lrank: Option<&str>, iconic_taxa: Option<Vec<String>>, id_above: Option<&str>, id_below: Option<&str>, identifications: Option<&str>, lat: Option<f64>, lng: Option<f64>, radius: Option<&str>, nelat: Option<f64>, nelng: Option<f64>, swlat: Option<f64>, swlng: Option<f64>, list_id: Option<i32>, not_in_project: Option<&str>, not_matching_project_rules_for: Option<&str>, q: Option<&str>, search_on: Option<&str>, quality_grade: Option<&str>, updated_since: Option<&str>, viewer_id: Option<&str>, reviewed: Option<bool>) -> Result<(), Error<IdentificationsSimilarSpeciesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/similar_species", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = acc {
        local_var_req_builder = local_var_req_builder.query(&[("acc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = captive {
        local_var_req_builder = local_var_req_builder.query(&[("captive", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = endemic {
        local_var_req_builder = local_var_req_builder.query(&[("endemic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = geo {
        local_var_req_builder = local_var_req_builder.query(&[("geo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_please {
        local_var_req_builder = local_var_req_builder.query(&[("id_please", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = identified {
        local_var_req_builder = local_var_req_builder.query(&[("identified", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = introduced {
        local_var_req_builder = local_var_req_builder.query(&[("introduced", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mappable {
        local_var_req_builder = local_var_req_builder.query(&[("mappable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = native {
        local_var_req_builder = local_var_req_builder.query(&[("native", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = out_of_range {
        local_var_req_builder = local_var_req_builder.query(&[("out_of_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pcid {
        local_var_req_builder = local_var_req_builder.query(&[("pcid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = photos {
        local_var_req_builder = local_var_req_builder.query(&[("photos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = popular {
        local_var_req_builder = local_var_req_builder.query(&[("popular", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sounds {
        local_var_req_builder = local_var_req_builder.query(&[("sounds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_is_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_is_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = threatened {
        local_var_req_builder = local_var_req_builder.query(&[("threatened", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = verifiable {
        local_var_req_builder = local_var_req_builder.query(&[("verifiable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = licensed {
        local_var_req_builder = local_var_req_builder.query(&[("licensed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = photo_licensed {
        local_var_req_builder = local_var_req_builder.query(&[("photo_licensed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = not_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("not_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("not_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = license {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("license".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("license", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = ofv_datatype {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ofv_datatype".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ofv_datatype", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = photo_license {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("photo_license".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("photo_license", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = project_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("project_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("project_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("site_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("site_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = sound_license {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("sound_license".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("sound_license", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_name {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_name".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_name", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = ident_user_id {
        local_var_req_builder = local_var_req_builder.query(&[("ident_user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = day {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("day".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("day", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = month {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("month".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("month", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = year {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("year".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("year", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = term_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("term_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("term_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = term_value_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("term_value_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("term_value_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_term_value_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_term_value_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_term_value_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = acc_above {
        local_var_req_builder = local_var_req_builder.query(&[("acc_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = acc_below {
        local_var_req_builder = local_var_req_builder.query(&[("acc_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = acc_below_or_unknown {
        local_var_req_builder = local_var_req_builder.query(&[("acc_below_or_unknown", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_on {
        local_var_req_builder = local_var_req_builder.query(&[("created_on", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_on {
        local_var_req_builder = local_var_req_builder.query(&[("observed_on", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unobserved_by_user_id {
        local_var_req_builder = local_var_req_builder.query(&[("unobserved_by_user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = apply_project_rules_for {
        local_var_req_builder = local_var_req_builder.query(&[("apply_project_rules_for", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cs {
        local_var_req_builder = local_var_req_builder.query(&[("cs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = csa {
        local_var_req_builder = local_var_req_builder.query(&[("csa", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = csi {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("csi".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("csi", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = geoprivacy {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("geoprivacy".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("geoprivacy", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_geoprivacy {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_geoprivacy".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_geoprivacy", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = iconic_taxa {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxa".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxa", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = identifications {
        local_var_req_builder = local_var_req_builder.query(&[("identifications", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lat {
        local_var_req_builder = local_var_req_builder.query(&[("lat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lng {
        local_var_req_builder = local_var_req_builder.query(&[("lng", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = radius {
        local_var_req_builder = local_var_req_builder.query(&[("radius", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = nelat {
        local_var_req_builder = local_var_req_builder.query(&[("nelat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = nelng {
        local_var_req_builder = local_var_req_builder.query(&[("nelng", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swlat {
        local_var_req_builder = local_var_req_builder.query(&[("swlat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swlng {
        local_var_req_builder = local_var_req_builder.query(&[("swlng", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_id {
        local_var_req_builder = local_var_req_builder.query(&[("list_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = not_in_project {
        local_var_req_builder = local_var_req_builder.query(&[("not_in_project", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = not_matching_project_rules_for {
        local_var_req_builder = local_var_req_builder.query(&[("not_matching_project_rules_for", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_on {
        local_var_req_builder = local_var_req_builder.query(&[("search_on", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = local_var_req_builder.query(&[("quality_grade", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = updated_since {
        local_var_req_builder = local_var_req_builder.query(&[("updated_since", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = viewer_id {
        local_var_req_builder = local_var_req_builder.query(&[("viewer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = reviewed {
        local_var_req_builder = local_var_req_builder.query(&[("reviewed", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("taxon_id", &taxon_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdentificationsSimilarSpeciesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Given zero to many of following parameters, returns `leaf taxa` associated with identifications matching the search criteria and the count of identifications they are associated with, ordered by count descending. `Leaf taxa` are the leaves of the taxonomic tree containing only the taxa associated with observations matching the search criteria. 
pub async fn identifications_species_counts_get(configuration: &configuration::Configuration, current_taxon: Option<bool>, own_observation: Option<bool>, is_change: Option<bool>, taxon_active: Option<bool>, observation_taxon_active: Option<bool>, id: Option<Vec<i32>>, rank: Option<Vec<String>>, observation_rank: Option<Vec<String>>, user_id: Option<Vec<i32>>, user_login: Option<Vec<String>>, current: Option<bool>, category: Option<Vec<String>>, place_id: Option<Vec<String>>, quality_grade: Option<Vec<String>>, taxon_id: Option<Vec<String>>, observation_taxon_id: Option<Vec<String>>, iconic_taxon_id: Option<Vec<String>>, observation_iconic_taxon_id: Option<Vec<String>>, lrank: Option<&str>, hrank: Option<&str>, observation_lrank: Option<&str>, observation_hrank: Option<&str>, without_taxon_id: Option<Vec<String>>, without_observation_taxon_id: Option<Vec<String>>, d1: Option<String>, d2: Option<String>, observation_created_d1: Option<String>, observation_created_d2: Option<String>, observed_d1: Option<String>, observed_d2: Option<String>, id_above: Option<&str>, id_below: Option<&str>, page: Option<&str>, per_page: Option<&str>, order: Option<&str>, order_by: Option<&str>, only_id: Option<bool>, taxon_of: Option<&str>) -> Result<crate::models::SpeciesCountsResponse, Error<IdentificationsSpeciesCountsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/identifications/species_counts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_taxon {
        local_var_req_builder = local_var_req_builder.query(&[("current_taxon", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = own_observation {
        local_var_req_builder = local_var_req_builder.query(&[("own_observation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_change {
        local_var_req_builder = local_var_req_builder.query(&[("is_change", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_taxon_active {
        local_var_req_builder = local_var_req_builder.query(&[("observation_taxon_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_rank {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_rank".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_rank", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = user_login {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("user_login".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("user_login", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = current {
        local_var_req_builder = local_var_req_builder.query(&[("current", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("category".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("category", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = place_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("place_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("place_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = quality_grade {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("quality_grade".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("quality_grade", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = observation_iconic_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("observation_iconic_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("observation_iconic_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = lrank {
        local_var_req_builder = local_var_req_builder.query(&[("lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hrank {
        local_var_req_builder = local_var_req_builder.query(&[("hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_lrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_lrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_hrank {
        local_var_req_builder = local_var_req_builder.query(&[("observation_hrank", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = without_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = without_observation_taxon_id {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("without_observation_taxon_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("without_observation_taxon_id", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = d1 {
        local_var_req_builder = local_var_req_builder.query(&[("d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = d2 {
        local_var_req_builder = local_var_req_builder.query(&[("d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observation_created_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observation_created_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d1 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = observed_d2 {
        local_var_req_builder = local_var_req_builder.query(&[("observed_d2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_above {
        local_var_req_builder = local_var_req_builder.query(&[("id_above", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id_below {
        local_var_req_builder = local_var_req_builder.query(&[("id_below", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order_by {
        local_var_req_builder = local_var_req_builder.query(&[("order_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_id {
        local_var_req_builder = local_var_req_builder.query(&[("only_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = taxon_of {
        local_var_req_builder = local_var_req_builder.query(&[("taxon_of", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IdentificationsSpeciesCountsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

